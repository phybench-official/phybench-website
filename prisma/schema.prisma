// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}


model User {
  id            String          @id @default(cuid())
  username      String?
  name          String?
  email         String          @unique
  emailVerified DateTime?
  image         String?
  role          String?
  realname      String?

  accounts      Account[]
  sessions      Session[]
  // Optional for WebAuthn support
  Authenticator Authenticator[]

  problems        Problem[]                                    // 用户上传的题目
  examineProblems Problem[] @relation("UserExamineProblems")   // 用户可审的题目
  offerProblems   Problem[] @relation("UserOfferProblems")     // 用户提供的题目
  translateProblems Problem[] @relation("UserTranslateProblems")

  score       Int          @default(0)                         // 用户的积分
  scoreEvents ScoreEvent[] @relation("UserScoreEvents")        // 用户的积分事件

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Account {
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([provider, providerAccountId])
}

model Session {
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  identifier String
  token      String
  expires    DateTime

  @@id([identifier, token])
}

// Optional for WebAuthn support
model Authenticator {
  credentialID         String  @unique
  userId               String
  providerAccountId    String
  credentialPublicKey  String
  counter              Int
  credentialDeviceType String
  credentialBackedUp   Boolean
  transports           String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@id([userId, credentialID])
}



// 物理问题对象
model Problem {
  id               Int   @id @default(autoincrement())
  userId           String
  title            String                    // 题目名称
  tag              ProblemTag                // 题目类型（力热光电近四大及以上）
  description      String @default("")       // 题目描述
  note             String @default("")       // 题目备注
  source           String?                   // 题目来源（选填）
  content          String                    // 题干
  translatedContent  String  @default("")
  variables        ProblemVariable[]         // 题目涉及的变量（包括数值范围）
  solution         String                    // 题目解答过程
  translatedSolution  String  @default("")
  answer           String                    // 题目答案，一个表达式
  offererEmail     String?                   // 供题人邮箱（选填）
  offererId        String?                   // 供题人Id
  aiPerformances   AiPerformance[]           // AI表现（提交时选填，允许列表为空）
  status           ProblemStatus @default(PENDING)             // 审核状态
  translatedStatus ProblemStatus @default(PENDING)             // 翻译状态
  score            Int?                                        // 题目积分（由审核员给出）
  remark           String?                                     // 审核评语（由审核员给出）
  examiners        User[]  @relation("UserExamineProblems")    // 审核员
  translators        User[]  @relation("UserTranslateProblems")
  nominated        String?  @default("No")                     // 审核提名
  scoreEvents      ScoreEvent[]   @relation("ProblemScoreEvents")
  createdAt        DateTime @default(now())
  updatedAt        DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  offer User? @relation("UserOfferProblems", fields: [offererId], references: [id], onDelete: Cascade)
}

enum ProblemTag {
  MECHANICS            // 力学
  ELECTRICITY          // 电磁学
  THERMODYNAMICS       // 热学
  OPTICS               // 光学
  MODERN               // 近代物理
  ADVANCED             // 四大力学及以上知识
  OTHER                // 其它
}

model ProblemVariable {
  id           Int   @id @default(autoincrement())
  problemId    Int
  name         String      // 变量名
  lowerBound   Float       // 变量数值范围下限
  upperBound   Float       // 变量数值范围上限

  problem      Problem  @relation(fields: [problemId], references: [id])
}

enum ProblemStatus {
  PENDING       // 待审核
  RETURNED      // 已打回
  APPROVED      // 已通过
  REJECTED      // 已拒绝
  ARCHIVED      // 已归档
}

// AI表现对象
model AiPerformance {
  id              Int         @id @default(autoincrement())
  problemId       Int
  aiName          String               // AI名称
  aiSolution      String               // AI解答过程
  aiAnswer        String               // AI答案
  isCorrect       Boolean              // AI所给答案是否正确
  comment         String?              // 用户评语
  tag             AiPerformanceTag @default(SUBMITTED)    // AI表现的性质（“学生上传”或“测评相关”）
  aiScore         Int?                 // AI得分（AI表现与测评相关时具有此属性）
  unlistedAiName  String?              // 若AI名称为OTHER，则此字段非空，为学生自行输入的AI名称
  createdAt       DateTime       @default(now())

  problem         Problem        @relation(fields: [problemId], references: [id])
}

enum AiPerformanceTag {
  SUBMITTED            // 学生上传问题时自附的AI表现
  EVALUATION           // 与测评相关的AI表现
}

// 积分事件对象
model ScoreEvent {
  id Int @id @default(autoincrement())
  tag ScoreEventTag    // 积分事件类型
  score Int            // 获得积分
  userId String
  user User @relation("UserScoreEvents", fields: [userId], references: [id], onDelete: Cascade)
  problemId Int? 
  problem Problem? @relation("ProblemScoreEvents", fields: [problemId], references: [id]) 
  problemStatus ProblemStatus?
  problemScore Int?
  problemRemark String?
  problemNominated String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum ScoreEventTag {
  OFFER       // 提供题目获得积分
  SUBMIT      // 上传题目获得积分
  EXAMINE     // 审核题目获得积分
  DEBUG       // 为网站开发反馈bug获得积分
  PUNISH      // 被惩罚，减积分
}


